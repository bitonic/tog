
entrypoints Program;

layout toplevel;
layout "where";
layout "field";
layout "postulate";

Prog. Program ::= "module" Name "where" "{" [Decl] "}";

position token Name ((letter | '_') (letter | digit | '-' | '\'' | '_')*) ;

separator Decl ";";

TypeSig.   Decl  ::= Name ":" Expr;
FunDef.    Decl  ::= Name [Pattern1] "=" Expr Where;
Data.      Decl  ::= "data" Name Params DataBody;
Record.    Decl  ::= "record" Name Params RecordBody;
Open.      Decl  ::= "open" Name;
Import.    Decl  ::= "open" "import" Name;
Postulate. Decl ::= "postulate" "{" [Decl] "}";

Where.   Where ::= "where" "{" [Decl] "}";
NoWhere. Where ::= ;

NoParams.  Params ::= ;
ParamDecl. Params ::= [Binding];
ParamDef.  Params ::= [HiddenName];

NotHidden. HiddenName ::= Name;
Hidden.    HiddenName ::= "{" Name "}";
separator nonempty HiddenName "";

NoDataBody. DataBody ::= ":" Name;
DataBody.   DataBody ::= "where" "{" [Constr] "}";

NoRecordBody. RecordBody ::= ":" Name;
RecordBody.   RecordBody ::= "where" "{" "constructor" Name Fields "}";

NoFields. Fields ::= ;
Fields.   Fields ::= ";" "field" "{" [Constr] "}";

Constr. Constr ::= Name ":" Expr;
separator Constr ";";

Tel. Telescope ::= [Binding];

Bind.  Binding ::= "(" [Arg] ":" Expr ")";
HBind. Binding ::= "{" [Arg] ":" Expr "}";
separator nonempty Binding "";

Lam.  Expr  ::= "\\" [Name] "->" Expr;
Pi.   Expr  ::= Telescope "->" Expr;
Fun.  Expr  ::= Expr1 "->" Expr;
_.    Expr  ::= Expr1;
Eq.   Expr1 ::= Expr2 "==" Expr2;
_.    Expr1 ::= Expr2;
App.  Expr2 ::= [Arg];
_.    Expr3 ::= "(" Expr ")";
Id.   Expr3 ::= Name;

HArg. Arg ::= "{" Expr "}";
Arg.  Arg ::= Expr3;
separator nonempty Arg "";

AppP.  Pattern  ::= Pattern Pattern1;
IdP.   Pattern1 ::= Name;
HideP. Pattern1 ::= "{" Pattern "}";
coercions Pattern 1;
separator Pattern1 "";

separator nonempty Name "";

comment "--";
comment "{-" "-}";

