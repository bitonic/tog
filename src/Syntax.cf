
entrypoints Program;

layout toplevel;
layout "where";
layout "field";

Prog. Program ::= [Decl];

separator Decl ";";

TypeSig.  Decl ::= Ident ":" Expr;
FunDef.   Decl ::= Ident [Pattern1] "=" Expr;
Data.     Decl ::= "data" Ident Params DataBody;
Record.   Decl ::= "record" Ident Params RecordBody;
Open.     Decl ::= "open" Ident;

NoParams.  Params ::= ;
ParamDecl. Params ::= [Binding];
ParamDef.  Params ::= [HiddenIdent];

NotHidden. HiddenIdent ::= Ident;
Hidden.    HiddenIdent ::= "{" Ident "}";
separator nonempty HiddenIdent "";

NoDataBody. DataBody ::= ":" "Set";
DataBody.   DataBody ::= "where" "{" [Constr] "}";

NoRecordBody. RecordBody ::= ":" "Set";
RecordBody.   RecordBody ::= "where" "{" "constructor" Ident ";" "field" "{" [Constr] "}" "}";

Constr. Constr ::= Ident ":" Expr;
separator Constr ";";

Bind.  Binding ::= "(" Ident ":" Expr ")";
HBind. Binding ::= "{" Ident ":" Expr "}";
separator nonempty Binding "";

Lam.  Expr  ::= "\\" [Ident] "->" Expr;
Pi.   Expr  ::= Binding "->" Expr;
Fun.  Expr  ::= Expr1 "->" Expr;
Eq.   Expr1 ::= Expr2 "==" Expr2;
App.  Expr2 ::= Expr2 Expr3;
Set.  Expr3 ::= "Set";
Name. Expr3 ::= Ident;
coercions Expr 3;

AppP. Pattern  ::= Pattern Pattern1;
VarP. Pattern1 ::= Ident;
coercions Pattern 1;
separator Pattern1 "";

separator nonempty Ident "";

comment "--";
comment "{-" "-}";

